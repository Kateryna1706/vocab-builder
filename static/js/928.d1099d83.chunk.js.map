{"version":3,"file":"static/js/928.d1099d83.chunk.js","mappings":"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","sources":["components/ProgressBar/ProgressBar.styled.js","components/ProgressBar/ProgressBar.jsx","components/TrainingRoom/TrainingRoom.jsx","pages/TrainingPage/TrainingPage.styled.js","pages/TrainingPage/TrainingPage.jsx","redux/words/wordsSelectors.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ProgressWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n\n  .progress {\n    font-family: 'FixelDisplay-Medium', sans-serif;\n    font-size: 16px;\n    line-height: 24px;\n    font-weight: 500;\n\n    color: #121417;\n  }\n\n  @media (min-width: 1440px) {\n    justify-content: start;\n  }\n`;\n","import { ProgressWrapper } from './ProgressBar.styled';\n\nimport { useAdaptive } from 'hooks/useAdaptive';\nimport { useLocation } from 'react-router-dom';\n\nimport { CircularProgress } from '@mui/joy';\n\nconst ProgressBar = ({\n  progress,\n  sizeMobile,\n  sizeFromTablet,\n  trackColor,\n  progressColor,\n}) => {\n  const { isTablet, isDesktop } = useAdaptive();\n  const { pathname } = useLocation();\n\n  return (\n    <ProgressWrapper>\n      {(isTablet || isDesktop) && pathname !== '/training' && (\n        <span className=\"progressColumn\">{progress}</span>\n      )}\n      <CircularProgress\n        determinate\n        variant=\"solid\"\n        value={progress}\n        sx={{\n          '--CircularProgress-size': `${\n            isTablet || isDesktop ? sizeFromTablet : sizeMobile\n          }`,\n          '--CircularProgress-trackThickness': '5px',\n          '--CircularProgress-trackColor': trackColor,\n          '--CircularProgress-progressColor': progressColor,\n        }}\n      >\n        {pathname === '/training' && (\n          <span className=\"progress\">{progress}</span>\n        )}\n      </CircularProgress>\n    </ProgressWrapper>\n  );\n};\n\nexport default ProgressBar;\n","const TrainingRoom = () => {\n  return <div></div>;\n};\n\nexport default TrainingRoom;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  box-sizing: border-box;\n\n  width: 100%;\n  max-width: 375px;\n  padding: 32px 16px 48px;\n\n  background-color: transparent;\n\n  .bloodReport {\n    width: 144px;\n    height: 166px;\n\n    @media (min-width: 768px) {\n      width: 205px;\n      height: 230px;\n    }\n  }\n\n  @media (min-width: 768px) {\n    width: 768px;\n    max-width: 768px;\n    padding: 80px 32px 48px;\n  }\n\n  @media (min-width: 1440px) {\n    width: 1440px;\n    max-width: 1440px;\n    padding: 80px 100px 48px;\n  }\n`;\n\nexport const MainBlock = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  min-height: 100vh;\n\n  background-color: #f8f8f8;\n`;\n\nexport const WrapperMessage = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  padding-top: 43px;\n\n  img {\n    margin-bottom: 33px;\n  }\n\n  p:first-of-type {\n    font-family: 'FixelDisplay-Medium', sans-serif;\n    font-weight: 600;\n    font-size: 16px;\n    line-height: 24px;\n\n    color: #121417;\n\n    @media (min-width: 768px) {\n      align-self: start;\n\n      font-weight: 600;\n      font-size: 20px;\n      line-height: 30px;\n    }\n  }\n\n  p:last-of-type {\n    margin-bottom: 132px;\n\n    font-family: 'FixelDisplay-Regular', sans-serif;\n    font-weight: 400;\n    font-size: 14px;\n\n    color: #121417;\n\n    @media (min-width: 768px) {\n      margin-bottom: 64px;\n\n      font-weight: 400;\n      font-size: 16px;\n      line-height: 24px;\n    }\n  }\n\n  @media (min-width: 768px) {\n    padding-top: 60px;\n\n    .wrapperText {\n      width: 581px;\n    }\n  }\n\n  @media (min-width: 1440px) {\n    flex-direction: row-reverse;\n\n    padding-top: 113px;\n  }\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n\n  width: 100%;\n\n  .button {\n    width: 100%;\n    max-width: 343px;\n    min-width: 271px;\n\n    padding: 0;\n    border: none;\n\n    box-sizing: border-box;\n\n    font-family: 'FixelDisplay-Bold', sans-serif;\n    font-size: 16px;\n    line-height: 24px;\n    font-weight: 700;\n\n    @media (min-width: 768px) {\n      width: 215px;\n      max-width: 215px;\n      min-width: 215px;\n\n      font-size: 18px;\n      line-height: 28px;\n    }\n  }\n\n  .add {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    height: 56px;\n    border-radius: 30px;\n\n    color: #fcfcfc;\n    background-color: #85aa9f;\n\n    &:hover,\n    &:focus {\n      background-color: #a5c0b8;\n    }\n  }\n\n  .cancel {\n    height: 22px;\n\n    color: rgba(18, 20, 23, 0.5);\n    background-color: transparent;\n\n    &:hover,\n    &:focus {\n      color: #85aa9f;\n    }\n\n    @media (min-width: 768px) {\n      height: 56px;\n\n      border-radius: 30px;\n      border: 1px solid #85aa9f;\n\n      color: #85aa9f;\n      background-color: transparent;\n\n      &:hover,\n      &:focus {\n        color: #fcfcfc;\n        background-color: #85aa9f;\n      }\n    }\n  }\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    gap: 10px;\n\n    width: 581px;\n  }\n`;\n\n// export const Button = styled.button`\n//   width: 100%;\n//   max-width: 343px;\n//   min-width: 271px;\n\n//   padding: 0;\n//   border: none;\n\n//   box-sizing: border-box;\n\n//   font-family: 'FixelDisplay-Bold', sans-serif;\n//   font-size: 16px;\n//   line-height: 24px;\n//   font-weight: 700;\n\n//   @media (min-width: 768px) {\n//     width: 215px;\n//     max-width: 215px;\n//     min-width: 215px;\n\n//     font-size: 18px;\n//     line-height: 28px;\n//   }\n// `;\n","import ProgressBar from 'components/ProgressBar/ProgressBar';\nimport TrainingRoom from 'components/TrainingRoom/TrainingRoom';\nimport {\n  ButtonWrapper,\n  Container,\n  MainBlock,\n  WrapperMessage,\n} from './TrainingPage.styled';\n\nimport { getTasks } from 'redux/words/wordsOperations';\nimport { selectAnswers } from 'redux/words/wordsSelectors';\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport bloodReport from '../../image/blood-report.webp';\nimport bloodReport2 from '../../image/blood-report@2x.webp';\n\nconst TrainingPage = () => {\n  const [tasksTotal, setTasksTotal] = useState(0);\n\n  const dispatch = useDispatch();\n  const answers = useSelector(selectAnswers);\n  const progress = useMemo(() => {\n    return tasksTotal === 0 || answers.length === 0\n      ? 0\n      : (answers.length / tasksTotal) * 100;\n  }, [answers.length, tasksTotal]);\n\n  useEffect(() => {\n    dispatch(getTasks())\n      .then(data => {\n        setTasksTotal(data.payload.length);\n      })\n      .catch(error => console.log(error));\n  }, [dispatch, tasksTotal]);\n\n  return (\n    <MainBlock>\n      <Container>\n        {tasksTotal === 0 ? (\n          <WrapperMessage>\n            <img\n              className=\"bloodReport\"\n              srcSet={`${bloodReport} 1x, ${bloodReport2} 2x`}\n              src={bloodReport}\n              alt=\"list sheet\"\n              loading=\"lazy\"\n            />\n            <div className=\"wrapperText\">\n              <p>You don't have a single word to learn right now. </p>\n              <p>\n                Please create or add a word to start the workout. We want to\n                improve your vocabulary and develop your knowledge, so please\n                share the words you are interested in adding to your study.\n              </p>\n              <ButtonWrapper>\n                <Link\n                  to=\"/dictionary\"\n                  state={{ from: '/training' }}\n                  className=\"add button\"\n                >\n                  Add word\n                </Link>\n                <button\n                  type=\"button\"\n                  onClick={() => {}}\n                  className=\"cancel button\"\n                >\n                  Cancel\n                </button>\n              </ButtonWrapper>\n            </div>\n          </WrapperMessage>\n        ) : (\n          <>\n            <ProgressBar\n              progress={progress}\n              sizeMobile=\"50px\"\n              sizeFromTablet=\"64px\"\n              trackColor=\"#85AA9F\"\n              progressColor=\"#FFFFFF\"\n            />\n            <TrainingRoom />\n          </>\n        )}\n        {/* <ButtonWrapper>\n          <Button type=\"submit\" onClick={handleClickAdd} className=\"add\">\n            Add word\n          </Button>\n          <Button type=\"button\" onClick={() => {}} className=\"cancel\">\n            Cancel\n          </Button>\n        </ButtonWrapper> */}\n      </Container>\n    </MainBlock>\n  );\n};\n\nexport default TrainingPage;\n","export const selectOtherUsersWords = state => state.words.otherWords;\n\nexport const selectOwnWords = state => state.words.ownWords;\n\nexport const selectStatistics = state => state.words.statistics;\n\nexport const selectCategories = state => state.words.categories;\n\nexport const selectTasks = state => state.words.tasks;\n\nexport const selectAnswers = state => state.words.answers;\n\nexport const selectIsLoading = state => state.words.isLoading;\n\nexport const selectError = state => state.words.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectTotalPagesOwn = state => state.words.totalPagesOwn;\n\nexport const selectTotalPagesOther = state => state.words.totalPagesOther;\n"],"names":["ProgressWrapper","styled","_templateObject","_taggedTemplateLiteral","_ref","progress","sizeMobile","sizeFromTablet","trackColor","progressColor","isTablet","isDesktop","useAdaptive","pathname","useLocation","_jsxs","children","_jsx","className","CircularProgress","determinate","variant","value","sx","concat","TrainingRoom","Container","MainBlock","_templateObject2","WrapperMessage","_templateObject3","ButtonWrapper","_templateObject4","TrainingPage","tasksTotal","setTasksTotal","useState","dispatch","useDispatch","answers","useSelector","selectAnswers","useMemo","length","useEffect","getTasks","then","data","payload","catch","error","console","log","srcSet","bloodReport","bloodReport2","src","alt","loading","Link","to","state","from","type","onClick","_Fragment","ProgressBar","selectOtherUsersWords","words","otherWords","selectOwnWords","ownWords","selectStatistics","statistics","selectCategories","categories","selectFilter","filter","selectTotalPagesOwn","totalPagesOwn","selectTotalPagesOther","totalPagesOther"],"sourceRoot":""}